package com.subbotin.echo;import org.telegram.telegrambots.bots.TelegramLongPollingBot;import org.telegram.telegrambots.meta.api.methods.send.SendMessage;import org.telegram.telegrambots.meta.api.objects.Update;import org.telegram.telegrambots.meta.exceptions.TelegramApiException;public class EchoBot extends TelegramLongPollingBot {    @Override    public String getBotUsername() {        return "Echo Bot";    }    @Override    public String getBotToken() {        return "5496756567:AAHvkgTze6OSkcsNQXTQe46Rbh5Cwi0_ZIY";    }    /*    echo    input: Привет    received: Привет     */    @Override    public void onUpdateReceived(Update update) {        if (update.hasMessage() && update.getMessage().hasText()) {            if (update.getMessage().getText().equals("/start")) {                sendMsg(update.getMessage().getChatId(),                        "Hi, I'm Echo Bot!!!",                        update.getMessage().getChat().getFirstName());                return;            }            sendMsg(update.getMessage().getChatId(),                    update.getMessage().getText(),                    update.getMessage().getChat().getFirstName());        }    }    private void sendMsg(Long chatId, String text, String userName) {        /*        Логика отправки сообщений:            - создаем обьект SendMessage;            - проставим ChatId и текст с которым нужно взаимодействовать (ChatId - id пользователя с которым происходит взаимодействие);            - из update достаем message и получаем ChatId;            - создаём текст;            - получаем и печатаем имя пользователя;            - отправляем обратно принятое сообщение.         */        SendMessage msg = new SendMessage();        msg.setChatId(chatId);        msg.setText(text);        System.out.println("Пользователь использовал бота, userName = "                + userName);        try {            execute(msg);        } catch (TelegramApiException e) {            e.printStackTrace();        }    }}